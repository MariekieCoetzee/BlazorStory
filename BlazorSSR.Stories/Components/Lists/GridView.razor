@using System.ComponentModel

<div class="container pb-2 " style="background-color: @Color">
     <h3 class="text-center font-weight-light p-2" style="filter:@(TableTheme == TableThemeEnum.Invert ? "invert(1)" : "invert(0)")">Table GridView</h3>
    <QuickGrid Items=@_forecasts
               Class="table table-striped table-bordered table-hover table-sm" Theme="@(TableTheme == TableThemeEnum.Invert ? "invert" : "default")" >
        <PropertyColumn Property=@(f => f.Date)
                        Sortable="@SortDate"
                        Align="@((Align)AlignDate)"
                        Format="@DateFormat">
        </PropertyColumn>
            <PropertyColumn Title="Temperature Celsius"
                            Property=@(f => f.TemperatureC)
                            Sortable="@SortTempC"
                            Align="@((Align)AlignTempC)"
                            Format='@("0 °C")' />
            <PropertyColumn Title="Temperature Fahrenheit"
                            Property=@(f => f.TemperatureF)
                            Sortable="@SortTempF"
                            Align="@((Align)AlignTempF)"
                            Format='@("0 °F")' />
        @if (EnableSearch)  {
        <PropertyColumn Property=@(f => f.Summary)
                        Sortable="@SortSummary"
                        Align="@((Align)AlignSummary)">
            <ColumnOptions>
                    <div class="search-box">
                        <input type="search"
                               class="search-box-input ps-1"
                               autofocus
                               @bind="_summaryFilter"
                               placeholder="Search ..."
                               @bind:after="OnSearch" />
                    </div>

            </ColumnOptions>
        </PropertyColumn>
        }
        else
        {
            <PropertyColumn Property=@(f => f.Summary)
                            Sortable="@SortSummary"
                            Align="@((Align)AlignSummary)" />
        }
        </QuickGrid>
    </div>
@code {

    /// <summary>
    /// Summarised temperatures
    /// </summary>
    public enum TempEnum { Freezing, Bracing, Chilly, Cool, Mild, Warm, Balmy, Hot, Sweltering, Scorching }
    
    public enum AlignEnum { Left = 0, Center = 1, Right = 2, End = 3, Start= 4 }
    
    public enum TableThemeEnum { 
        Default,
        Invert
    }
    
    /// <summary>
    /// Align date field
    /// </summary>
    [Parameter]
    public AlignEnum AlignDate { get; set; }

    /// <summary>
    /// Align temp c field
    /// </summary>
    [Parameter]
    public AlignEnum AlignTempC { get; set; }

    /// <summary>
    /// Align temp F field
    /// </summary>
    [Parameter]
    public AlignEnum AlignTempF { get; set; }

    /// <summary>
    /// Align summary field
    /// </summary>
    [Parameter]
    public AlignEnum AlignSummary { get; set; }

    /// <summary>
    /// Enable search feature on Summary 
    /// </summary>
    [Parameter]
    public bool EnableSearch { get; set; }
    
    /// <summary>
    /// Format display of Date
    /// yyyy - year
    /// MM - month
    /// dd - day
    /// e.g. MM/dd/yyyy
    /// </summary>
    [Parameter]
    public string DateFormat { get; set; } = "yyyy-MM-dd";

    /// <summary>
    /// Select theme of table
    /// </summary>
    [Parameter]
    public TableThemeEnum TableTheme { get; set; }

    /// <summary>
    /// Set a color of the button.
    /// </summary>
    [Parameter]
    public string Color { get; set; } = "#007bff";
    
    /// <summary>
    /// Sort Date field
    /// </summary>
    [Parameter]
    public bool SortDate { get; set; }

    /// <summary>
    /// Boolean to sort Temp C  field
    /// </summary>
    [Parameter]
    public bool SortTempC { get; set; }

    /// <summary>
    /// Boolean to sort Temp F field
    /// </summary>
    [Parameter]
    public bool SortTempF { get; set; }

    /// <summary>
    /// Boolean to sort Summary field
    /// </summary>
    [Parameter]
    public bool SortSummary { get; set; }

    record WeatherForecast(DateOnly Date, int TemperatureC, int TemperatureF, string? Summary);

    IQueryable<WeatherForecast> _forecasts = null!;

    private string? _summaryFilter;
    private bool _showCelsius;
    
    /// <summary>
    /// Initialising method
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
    // Simulate retrieving the data asynchronously.
        await Task.Delay(1000);
        
        var startDate = DateOnly.FromDateTime(DateTime.Now);


        _forecasts = Enumerable.Range(1, 5).Select(index =>
            new WeatherForecast(startDate.AddDays(index), 
                                Random.Shared.Next(-20, 55), 
                                32 + (int)(Random.Shared.Next(-20, 55) / 0.5556), 
                                Enum.GetName(typeof(TempEnum), index))).AsQueryable();

    }

    private void OnSearch()
    {
        _forecasts = _forecasts.Where(x => _summaryFilter != null && x.Summary!.ToLower().Contains(_summaryFilter.ToLower()));
       StateHasChanged(); 
    }
    
}