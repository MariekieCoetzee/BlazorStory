<div class="container bg-white">
<PageTitle>Table</PageTitle>

<h1>Table</h1>

<p>This component demonstrates showing data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}
</div>
@code {
    private static readonly string[] Summaries = new[]
    {
        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
    };


    record WeatherForecast(DateOnly Date, int TemperatureC, int TemperatureF, string? Summary);

    IQueryable<WeatherForecast> forecasts = null!;

    protected override async Task OnInitializedAsync()
    {
    // Simulate retrieving the data asynchronously.
        await Task.Delay(1000);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        forecasts = Enumerable.Range(1, 5).Select(index =>
                                                      new WeatherForecast(startDate.AddDays(index), Random.Shared.Next(-20, 55), 32 + (int)(Random.Shared.Next(-20, 55) / 0.5556), Summaries[Random.Shared.Next(Summaries.Length)])
            ).AsQueryable();
    }

}